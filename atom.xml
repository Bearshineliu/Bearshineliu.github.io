<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huidodo.club/</id>
    <title>liu&apos;Blog</title>
    <updated>2019-12-16T07:53:14.742Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huidodo.club/"/>
    <link rel="self" href="https://huidodo.club//atom.xml"/>
    <subtitle>或浓郁烈海 
或淡如白水
就这是我的生活</subtitle>
    <logo>https://huidodo.club//images/avatar.png</logo>
    <icon>https://huidodo.club//favicon.ico</icon>
    <rights>All rights reserved 2019, liu&apos;Blog</rights>
    <entry>
        <title type="html"><![CDATA[参考]]></title>
        <id>https://huidodo.club//post/can-kao</id>
        <link href="https://huidodo.club//post/can-kao">
        </link>
        <updated>2019-12-12T06:22:37.000Z</updated>
        <summary type="html"><![CDATA[<p>1: SELECT 查询 101<br>
http://xuesql.cn/lesson/select_queries_introduction<br>
你可以把一个表(Table)想象成一个类别的事物，比如 狗 (Dogs), 表里的每一行就是 一条狗，每一列代表了狗的一种属性，比如： 颜色，长度等等）<br>
SELECT id,title,'中国’as country FROM movies; --通过sql给list中增加字段数据<br>
2: 条件查询 (constraints) (Pt. 1)<br>
http://xuesql.cn/lesson/select_queries_with_constraints<br>
SELECT * FROM movies where year between 2000 and 2010; --col_name (NOT) BETWEEN 1.5 AND 10.5, 连续的数据集合<br>
SELECT * FROM movies where year &gt;=2010 and length_minutes&lt;120; – =, !=, &lt; &lt;=, &gt;, &gt;= 比较运算符<br>
SELECT year, length_minutes FROM movies where year in (1999,2009); --col_name (NOT） IN (1, 3, 5),不连续的数据集合<br>
3: 条件查询(constraints) (Pt. 2)<br>
在字符串表达式中的字符串需要用引号 &quot; 包含，如果不用引号，SQL会认为是一个属性列的名字，如：col_name = color 表示 col_name和color两个属性一样的行 col_name = “color” 表示 col_name 属性为字符串 &quot;color&quot;的行<br>
练习这里居然可以输入双引号，真正的sql地方单引号才是字符串且不能用双引号。<br>
SELECT * FROM movies where title like ‘%Toy Story%’; --col_name LIKE “%AT%” (matches “AT”, “ATTIC”, “CAT” or even “BATS”) “%AT%” 代表AT 前后可以有任意字符<br>
SELECT * FROM movies where Director !=‘John Lasseter’; --col_name != “abcd”<br>
SELECT * FROM movies where title like ‘WALL%’; --找到所有电影名为 “WALL-” 开头的电影<br>
–突然奇想，like能和in一起用吗？直接用发现in里面的%识别不了，把like用substr代替，但是要指定下标范围，勉强也算是like和in一起用了。<br>
select * from movies where substr(title,0,3) in (‘Ca’,‘To’);<br>
4: 查询结果Filtering过滤 和 sorting排序<br>
DISTINCT 语法会直接删除重复的行,GROUP BY 也会返回唯一的行，不过可以对具有相同的 属性值的行做一些统计计算<br>
ORDER BY col_name 这句话的意思就是让结果按照 col_name 列的具体值做 ASC升序 或 DESC 降序，用 LIMIT 指定剪下多少长度<br>
–sql是先从后向前执行，查询后面结果后，用DISTINCT排重方法过滤<br>
SELECT DISTINCT director FROM movies ORDER BY director desc; --按导演名排重列出所有电影，并按导演名正序排列<br>
–LIMIT 和 OFFSET 子句通常和ORDER BY 语句一起使用，当我们对整个结果集排序之后，我们可以 LIMIT来指定只返回多少行结果 ,用 OFFSET来指定从哪一行开始返回<br>
SELECT * FROM movies ORDER BY year desc LIMIT 4 OFFSET 0 ; --列出按上映年份最新上线的4部电影<br>
SELECT * FROM movies ORDER BY title asc LIMIT 5 OFFSET 0 ; --按电影名字母序升序排列，列出前5部电影<br>
SELECT * FROM movies ORDER BY title asc LIMIT 5 OFFSET 5 ; --按电影名字母序升序排列，列出上一题之后的5部电影<br>
SELECT title FROM movies where director=‘John Lasseter’ order by length_minutes desc limit 1 OFFSET 2; --如果按片长排列，John Lasseter导演导过片长第3长的电影是哪部，列出名字即可<br>
SELECT * FROM movies order by Director ,year desc limit 10 OFFSET 0; --按导演名字母升序,如果导演名相同按年份降序,取前10部电影给我<br>
5: 复习 SELECT 查询<br>
latitudes在赤道以北是正数，以南是负数；longitudes在子午线东部是正数，以西是负数， 在查询中需要注意 经纬度和东西南北方向的对应关系。<br>
–列出所有在Chicago西部的城市，从西到东排序(包括所有字段)<br>
select * from north_american_cities where longitude &lt; (select longitude from north_american_cities where city = ‘Chicago’) order by longitude asc;<br>
–用人口数population排序,列出墨西哥Mexico最大的2个城市(包括所有字段)<br>
select * from north_american_cities wher country =‘Mexico’ order by population desc limit 2 offset 0;<br>
–列出美国United States人口3-4位的两个城市和他们的人口(包括所有字段)<br>
select * from north_american_cities where country =‘United States’ order by population desc limit 2 offset 2;<br>
–北美所有城市,请按国家名字母序从A-Z再按人口从多到少排列看下前10位的城市(包括所有字段)<br>
select * from north_american_cities where Latitude &gt;0 order by country asc , population desc limit 10 offset 0;<br>
6:用JOINs进行多表联合查询<br>
数据库范式是数据表设计的规范，在范式规范下，数据库里每个表存储的重复数据降到最少，同时在数据库范式下，表和表之间不再有很强的数据耦合<br>
把 INNER JOIN 想成两个集合的交集，INNER JOIN 可以简写做 JOIN. 两者是相同的意思，但我们还是会继续写作 INNER JOIN 以便和后面的 LEFT JOIN， RIGHT JOIN等相比较<br>
–找到所有电影的线下Domestic_sales和线上销售额<br>
SELECT * FROM movies mv ,Boxoffice box where mv.id = box.movie_id;<br>
SELECT * FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id;<br>
–找到所有线上销售额比线下销售大的电影<br>
SELECT * FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id WHERE box.International_sales&gt;Domestic_sales;<br>
–每部电影按线上销售额比较,排名最靠前的导演是谁,线上销量多少<br>
SELECT mv.director ,box.International_sales FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id order by box.International_sales desc limit 1;<br>
7: 外连接（OUTER JOINs）<br>
INNER JOIN 只会保留两个表都存在的数据，这意味着一些数据的丢失。在表A 连接 B, LEFT JOIN保留A的所有行，不管有没有能匹配上B 反过来 RIGHT JOIN则保留所有B里的行。最后FULL JOIN 不管有没有匹配上，同时保留A和B里的所有行<br>
如果某一行在另一个表不存在，会用 NULL来填充结果数据。所有在用这三个JOIN时，你需要单独处理 NULL<br>
–找到所有有雇员的办公室(buildings)名字<br>
SELECT DISTINCT bui.Building_name FROM Employees emp left join Buildings bui on bui.Building_name = emp.Building;<br>
–找到所有办公室里的所有角色（包含没有雇员的）,并做唯一输出(DISTINCT)。每个办公室中有的角色，重点是理解题目意思。<br>
select distinct building_name,role from Buildings b left join employees e on b.building_name =e.building;<br>
–找到所有有雇员的办公室(buildings)和对应的容量<br>
select distinct building,capacity from employees e left join buildings b on e.building = b.building_name where e.building !=‘null’;<br>
8: 关于特殊关键字 NULLs<br>
如果某个字段你没有填写到数据库，很可能就会出现NULL 。所有一个常见的方式就是为字段设置默认值。可以用IS NULL和 IS NOT NULL 来选在某个字段是否等于 NULL<br>
–找到雇员里还没有分配办公室的(列出名字和角色就可以)<br>
SELECT role,name FROM employees where building is NULL;<br>
–找到还没有雇员的办公室<br>
select distinct b.building_name from Buildings b left join employees e on e.building = b.building_name where e.name is Null;<br>
9: 在查询中使用表达式<br>
在SQL中可以用col_name的地方，都可以用表达式 来指定对属性进行一定的计算或处理,包含常用的数字，字符串，时间等处理过程<br>
–列出所有的电影ID,名字和销售总额(以百万美元为单位计算)<br>
SELECT m.id, m.title, (b.domestic_sales+b.international_sales)/10000000.00 as totalmillionamount FROM movies m left join boxoffice b on m.id = b.movie_id;<br>
–列出所有偶数年份的电影，需要电影ID,名字和年份<br>
SELECT m.id, m.title,m.year FROM movies m left join boxoffice b on m.id = b.movie_id where m.year%2 =0<br>
–John Lasseter导演的每部电影每分钟值多少钱,告诉我最高的3个电影名和价值就可以<br>
SELECT m.title, (b.domestic_sales+b.international_sales)/m.length_minutes as Priceminute FROM movies m left join boxoffice b on m.id = b.movie_id where m.director =‘John Lasseter’ order by Priceminute desc limit 3;<br>
–电影名最长的3部电影和他们的总销量是多少<br>
SELECT m.title, length(title) ,b.domestic_sales+b.international_sales as totalamount FROM movies m left join boxoffice b on m.id = b.movie_id order by length(title) desc limit 3;<br>
10: 在查询中进行统计I (Pt. 1)<br>
Pixar公司生产了多少电影？&quot;, 或 “每一年的票房冠军是谁?”,GROUP BY 数据分组语法可以按某个col_name对数据进行分组<br>
–找出就职年份最高的雇员(列出雇员名字+年份）<br>
SELECT name, years_employed FROM employees order by years_employed desc limit 1;<br>
–按角色(Role)统计一下每个角色的平均就职年份<br>
select avg(years_employed) from employees group by role;<br>
–按办公室名字总计一下就职年份总和<br>
select building,sum(years_employed) from employees group by building;<br>
–每栋办公室按人数排名,包括无雇员的办公室<br>
SELECT building,count(<em>) as count FROM employees where building is NOT null group by building<br>
–就职1,3,5,7年的人分别占总人数的百分比率是多少(给出年份和比率&quot;50%&quot; 记为 50)<br>
select count(</em>)100/(select count() from employees) from employees where Years_employed in(1,3,5,7) group by years_employed<br>
11: 在查询中进行统计II (Pt. 2)<br>
在 GROUP BY 分组语法中，我们知道数据库是先对数据做WHERE，然后对结果做分组，如果我们要对分组完的数据再筛选用HAVING。如果你不用GROUP BY语法, 简单的WHERE就够用了。<br>
–统计一下Artist角色的雇员数量<br>
SELECT count() FROM employees where role = ‘Artist’;<br>
select count() from employees group by role having role =‘Artist’;<br>
按角色统计一下每个角色的雇员数量<br>
select role,count() from employees group by role;<br>
算出Engineer角色的就职年份总计<br>
SELECT sum(Years_employed) FROM employees where role=‘Engineer’<br>
12: 查询执行顺序<br>
FROM 和 JOINs WHERE GROUP BY HAVING SELECT DISTINCT ORDER BY LIMIT / OFFSET<br>
统计出每一个导演的电影数量（列出导演名字和数量）<br>
SELECT count(*),director FROM movies group by director</p>
<p>————————————————<br>
版权声明：本文为CSDN博主「李万兴」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/weixin_38961903/article/details/102424862</p>
]]></summary>
        <content type="html"><![CDATA[<p>1: SELECT 查询 101<br>
http://xuesql.cn/lesson/select_queries_introduction<br>
你可以把一个表(Table)想象成一个类别的事物，比如 狗 (Dogs), 表里的每一行就是 一条狗，每一列代表了狗的一种属性，比如： 颜色，长度等等）<br>
SELECT id,title,'中国’as country FROM movies; --通过sql给list中增加字段数据<br>
2: 条件查询 (constraints) (Pt. 1)<br>
http://xuesql.cn/lesson/select_queries_with_constraints<br>
SELECT * FROM movies where year between 2000 and 2010; --col_name (NOT) BETWEEN 1.5 AND 10.5, 连续的数据集合<br>
SELECT * FROM movies where year &gt;=2010 and length_minutes&lt;120; – =, !=, &lt; &lt;=, &gt;, &gt;= 比较运算符<br>
SELECT year, length_minutes FROM movies where year in (1999,2009); --col_name (NOT） IN (1, 3, 5),不连续的数据集合<br>
3: 条件查询(constraints) (Pt. 2)<br>
在字符串表达式中的字符串需要用引号 &quot; 包含，如果不用引号，SQL会认为是一个属性列的名字，如：col_name = color 表示 col_name和color两个属性一样的行 col_name = “color” 表示 col_name 属性为字符串 &quot;color&quot;的行<br>
练习这里居然可以输入双引号，真正的sql地方单引号才是字符串且不能用双引号。<br>
SELECT * FROM movies where title like ‘%Toy Story%’; --col_name LIKE “%AT%” (matches “AT”, “ATTIC”, “CAT” or even “BATS”) “%AT%” 代表AT 前后可以有任意字符<br>
SELECT * FROM movies where Director !=‘John Lasseter’; --col_name != “abcd”<br>
SELECT * FROM movies where title like ‘WALL%’; --找到所有电影名为 “WALL-” 开头的电影<br>
–突然奇想，like能和in一起用吗？直接用发现in里面的%识别不了，把like用substr代替，但是要指定下标范围，勉强也算是like和in一起用了。<br>
select * from movies where substr(title,0,3) in (‘Ca’,‘To’);<br>
4: 查询结果Filtering过滤 和 sorting排序<br>
DISTINCT 语法会直接删除重复的行,GROUP BY 也会返回唯一的行，不过可以对具有相同的 属性值的行做一些统计计算<br>
ORDER BY col_name 这句话的意思就是让结果按照 col_name 列的具体值做 ASC升序 或 DESC 降序，用 LIMIT 指定剪下多少长度<br>
–sql是先从后向前执行，查询后面结果后，用DISTINCT排重方法过滤<br>
SELECT DISTINCT director FROM movies ORDER BY director desc; --按导演名排重列出所有电影，并按导演名正序排列<br>
–LIMIT 和 OFFSET 子句通常和ORDER BY 语句一起使用，当我们对整个结果集排序之后，我们可以 LIMIT来指定只返回多少行结果 ,用 OFFSET来指定从哪一行开始返回<br>
SELECT * FROM movies ORDER BY year desc LIMIT 4 OFFSET 0 ; --列出按上映年份最新上线的4部电影<br>
SELECT * FROM movies ORDER BY title asc LIMIT 5 OFFSET 0 ; --按电影名字母序升序排列，列出前5部电影<br>
SELECT * FROM movies ORDER BY title asc LIMIT 5 OFFSET 5 ; --按电影名字母序升序排列，列出上一题之后的5部电影<br>
SELECT title FROM movies where director=‘John Lasseter’ order by length_minutes desc limit 1 OFFSET 2; --如果按片长排列，John Lasseter导演导过片长第3长的电影是哪部，列出名字即可<br>
SELECT * FROM movies order by Director ,year desc limit 10 OFFSET 0; --按导演名字母升序,如果导演名相同按年份降序,取前10部电影给我<br>
5: 复习 SELECT 查询<br>
latitudes在赤道以北是正数，以南是负数；longitudes在子午线东部是正数，以西是负数， 在查询中需要注意 经纬度和东西南北方向的对应关系。<br>
–列出所有在Chicago西部的城市，从西到东排序(包括所有字段)<br>
select * from north_american_cities where longitude &lt; (select longitude from north_american_cities where city = ‘Chicago’) order by longitude asc;<br>
–用人口数population排序,列出墨西哥Mexico最大的2个城市(包括所有字段)<br>
select * from north_american_cities wher country =‘Mexico’ order by population desc limit 2 offset 0;<br>
–列出美国United States人口3-4位的两个城市和他们的人口(包括所有字段)<br>
select * from north_american_cities where country =‘United States’ order by population desc limit 2 offset 2;<br>
–北美所有城市,请按国家名字母序从A-Z再按人口从多到少排列看下前10位的城市(包括所有字段)<br>
select * from north_american_cities where Latitude &gt;0 order by country asc , population desc limit 10 offset 0;<br>
6:用JOINs进行多表联合查询<br>
数据库范式是数据表设计的规范，在范式规范下，数据库里每个表存储的重复数据降到最少，同时在数据库范式下，表和表之间不再有很强的数据耦合<br>
把 INNER JOIN 想成两个集合的交集，INNER JOIN 可以简写做 JOIN. 两者是相同的意思，但我们还是会继续写作 INNER JOIN 以便和后面的 LEFT JOIN， RIGHT JOIN等相比较<br>
–找到所有电影的线下Domestic_sales和线上销售额<br>
SELECT * FROM movies mv ,Boxoffice box where mv.id = box.movie_id;<br>
SELECT * FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id;<br>
–找到所有线上销售额比线下销售大的电影<br>
SELECT * FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id WHERE box.International_sales&gt;Domestic_sales;<br>
–每部电影按线上销售额比较,排名最靠前的导演是谁,线上销量多少<br>
SELECT mv.director ,box.International_sales FROM movies mv INNER JOIN Boxoffice box ON mv.id = box.movie_id order by box.International_sales desc limit 1;<br>
7: 外连接（OUTER JOINs）<br>
INNER JOIN 只会保留两个表都存在的数据，这意味着一些数据的丢失。在表A 连接 B, LEFT JOIN保留A的所有行，不管有没有能匹配上B 反过来 RIGHT JOIN则保留所有B里的行。最后FULL JOIN 不管有没有匹配上，同时保留A和B里的所有行<br>
如果某一行在另一个表不存在，会用 NULL来填充结果数据。所有在用这三个JOIN时，你需要单独处理 NULL<br>
–找到所有有雇员的办公室(buildings)名字<br>
SELECT DISTINCT bui.Building_name FROM Employees emp left join Buildings bui on bui.Building_name = emp.Building;<br>
–找到所有办公室里的所有角色（包含没有雇员的）,并做唯一输出(DISTINCT)。每个办公室中有的角色，重点是理解题目意思。<br>
select distinct building_name,role from Buildings b left join employees e on b.building_name =e.building;<br>
–找到所有有雇员的办公室(buildings)和对应的容量<br>
select distinct building,capacity from employees e left join buildings b on e.building = b.building_name where e.building !=‘null’;<br>
8: 关于特殊关键字 NULLs<br>
如果某个字段你没有填写到数据库，很可能就会出现NULL 。所有一个常见的方式就是为字段设置默认值。可以用IS NULL和 IS NOT NULL 来选在某个字段是否等于 NULL<br>
–找到雇员里还没有分配办公室的(列出名字和角色就可以)<br>
SELECT role,name FROM employees where building is NULL;<br>
–找到还没有雇员的办公室<br>
select distinct b.building_name from Buildings b left join employees e on e.building = b.building_name where e.name is Null;<br>
9: 在查询中使用表达式<br>
在SQL中可以用col_name的地方，都可以用表达式 来指定对属性进行一定的计算或处理,包含常用的数字，字符串，时间等处理过程<br>
–列出所有的电影ID,名字和销售总额(以百万美元为单位计算)<br>
SELECT m.id, m.title, (b.domestic_sales+b.international_sales)/10000000.00 as totalmillionamount FROM movies m left join boxoffice b on m.id = b.movie_id;<br>
–列出所有偶数年份的电影，需要电影ID,名字和年份<br>
SELECT m.id, m.title,m.year FROM movies m left join boxoffice b on m.id = b.movie_id where m.year%2 =0<br>
–John Lasseter导演的每部电影每分钟值多少钱,告诉我最高的3个电影名和价值就可以<br>
SELECT m.title, (b.domestic_sales+b.international_sales)/m.length_minutes as Priceminute FROM movies m left join boxoffice b on m.id = b.movie_id where m.director =‘John Lasseter’ order by Priceminute desc limit 3;<br>
–电影名最长的3部电影和他们的总销量是多少<br>
SELECT m.title, length(title) ,b.domestic_sales+b.international_sales as totalamount FROM movies m left join boxoffice b on m.id = b.movie_id order by length(title) desc limit 3;<br>
10: 在查询中进行统计I (Pt. 1)<br>
Pixar公司生产了多少电影？&quot;, 或 “每一年的票房冠军是谁?”,GROUP BY 数据分组语法可以按某个col_name对数据进行分组<br>
–找出就职年份最高的雇员(列出雇员名字+年份）<br>
SELECT name, years_employed FROM employees order by years_employed desc limit 1;<br>
–按角色(Role)统计一下每个角色的平均就职年份<br>
select avg(years_employed) from employees group by role;<br>
–按办公室名字总计一下就职年份总和<br>
select building,sum(years_employed) from employees group by building;<br>
–每栋办公室按人数排名,包括无雇员的办公室<br>
SELECT building,count(<em>) as count FROM employees where building is NOT null group by building<br>
–就职1,3,5,7年的人分别占总人数的百分比率是多少(给出年份和比率&quot;50%&quot; 记为 50)<br>
select count(</em>)100/(select count() from employees) from employees where Years_employed in(1,3,5,7) group by years_employed<br>
11: 在查询中进行统计II (Pt. 2)<br>
在 GROUP BY 分组语法中，我们知道数据库是先对数据做WHERE，然后对结果做分组，如果我们要对分组完的数据再筛选用HAVING。如果你不用GROUP BY语法, 简单的WHERE就够用了。<br>
–统计一下Artist角色的雇员数量<br>
SELECT count() FROM employees where role = ‘Artist’;<br>
select count() from employees group by role having role =‘Artist’;<br>
按角色统计一下每个角色的雇员数量<br>
select role,count() from employees group by role;<br>
算出Engineer角色的就职年份总计<br>
SELECT sum(Years_employed) FROM employees where role=‘Engineer’<br>
12: 查询执行顺序<br>
FROM 和 JOINs WHERE GROUP BY HAVING SELECT DISTINCT ORDER BY LIMIT / OFFSET<br>
统计出每一个导演的电影数量（列出导演名字和数量）<br>
SELECT count(*),director FROM movies group by director</p>
<p>————————————————<br>
版权声明：本文为CSDN博主「李万兴」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/weixin_38961903/article/details/102424862</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图标布局特点]]></title>
        <id>https://huidodo.club//post/tu-biao-bu-ju-te-dian</id>
        <link href="https://huidodo.club//post/tu-biao-bu-ju-te-dian">
        </link>
        <updated>2019-12-02T08:39:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://huidodo.club//post-images/1575276049822.png" alt=""></figure>
<h1 id="完整的图表要素">完整的图表要素</h1>
<h2 id="主标题中表达明确的信息和观点副标题进行详细的论述">主标题中表达明确的信息和观点，副标题进行详细的论述</h2>
<h1 id="突出标题区">突出标题区</h1>
<h2 id="标题区占13-12-硕大无比的图反而显得粗糙">标题区占1/3 1/2 硕大无比的图反而显得粗糙</h2>
<h1 id="竖向的构图方式">竖向的构图方式</h1>
<h2 id="图标外围高度-21-或者11-竖向构图避免视角长距离检索">图标外围高度 2：1 或者1：1  竖向构图避免视角长距离检索</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[颜色]]></title>
        <id>https://huidodo.club//post/yan-se</id>
        <link href="https://huidodo.club//post/yan-se">
        </link>
        <updated>2019-12-02T08:29:15.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://huidodo.club//post-images/1575275599749.png" alt=""><br>
0,81,107<br>
90,146,181<br>
0,166,231</p>
<p><img src="https://huidodo.club//post-images/1575275751443.png" alt=""><br>
0,56,115<br>
247,0,0<br>
206,219,231<br>
231,239,247</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[百度搜索OCPC_智能加词 产品评估及使用方法]]></title>
        <id>https://huidodo.club//post/bai-du-sou-suo-ocpc_-zhi-neng-jia-ci-chan-pin-ping-gu-ji-shi-yong-fang-fa</id>
        <link href="https://huidodo.club//post/bai-du-sou-suo-ocpc_-zhi-neng-jia-ci-chan-pin-ping-gu-ji-shi-yong-fang-fa">
        </link>
        <updated>2019-10-17T01:31:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="智能加词">智能加词</h1>
<p>功能位置：OCPC投放包&gt;智能加词<br>
功能简介：智能加词将在进入oCPC第二阶段后，每隔三天为您的账户添加一批新的高转化关键词（处于暂停状态），需您主动查看并启用后才会开始投放，请您及时启用</p>
<h1 id="监控逻辑">监控逻辑</h1>
<p>通过给智能加词关键词关键词标记OCPC来区别流量转化情况</p>
<pre><code>智能加词关键词url加参&amp;OCPC智能加词
</code></pre>
<h1 id="分组监控对比">分组监控对比</h1>
<p>GA统计筛选URL字段中包含‘OCPC智能加词’ 流量转化率<br>
<img src="https://huidodo.club//post-images/1571276580187.png" alt=""></p>
<h1 id="通过以上数据对比可以新产品功能进行评估对异常关键词进行修改">通过以上数据对比，可以新产品功能进行评估，对异常关键词进行修改。</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git page]]></title>
        <id>https://huidodo.club//post/git-page</id>
        <link href="https://huidodo.club//post/git-page">
        </link>
        <updated>2019-10-14T05:58:10.000Z</updated>
        <content type="html"><![CDATA[<p>https://www.cnblogs.com/ztoz/p/5515475.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git ssh]]></title>
        <id>https://huidodo.club//post/git-ssh</id>
        <link href="https://huidodo.club//post/git-ssh">
        </link>
        <updated>2019-10-10T07:57:24.000Z</updated>
        <content type="html"><![CDATA[<p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。<br>
github的SSH配置如下：<br>
1 、设置Git的user name和email：<br>
$ git config --global user.name &quot;xuhaiyan&quot;<br>
$ git config --global user.email &quot;haiyan.xu.vip@gmail.com&quot;<br>
2、生成SSH密钥过程：<br>
1）查看是否已经有了ssh密钥：cd ~/.ssh<br>
如果没有密钥则不会有此文件夹，有则备份删除<br>
2）生存密钥：<br>
$ ssh-keygen -t rsa -C “haiyan.xu.vip@gmail.com”<br>
按3个回车，密码为空。<br>
Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>
Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>
The key fingerprint is:<br>
最后得到了两个文件：id_rsa和id_rsa.pub<br>
3）添加密钥到ssh：ssh-add 文件名<br>
需要之前输入密码。<br>
4）在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。<br>
打开https://github.com/ ，登陆xuhaiyan825，然后添加ssh。<br>
5）测试：ssh git@github.com<br>
The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>
Are you sure you want to continue connecting (yes/no)? yes<br>
Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.<br>
ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access<br>
Connection to github.com closed.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[导航]]></title>
        <id>https://huidodo.club//post/dao-hang</id>
        <link href="https://huidodo.club//post/dao-hang">
        </link>
        <updated>2019-10-10T05:54:04.000Z</updated>
        <content type="html"><![CDATA[<p>开源项目<br>
WebStack-Laravel</p>
<p>GIT 部署</p>
<pre><code>git clone https://github.com/hui-ho/WebStack-Laravel.git
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://huidodo.club//post-images/1570686915715.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合并多文件]]></title>
        <id>https://huidodo.club//post/he-bing-duo-wen-jian</id>
        <link href="https://huidodo.club//post/he-bing-duo-wen-jian">
        </link>
        <updated>2019-10-09T06:21:15.000Z</updated>
        <content type="html"><![CDATA[<p>Table.PromoteHeaders(Csv.Document([Content],[Column=9,Encoding=936]),</p>
<p>[PromoteAllScalars=true]))</p>
<p>column=9 表示9列</p>
<p>Encoding=936 .csv内有汉子转换编码</p>
<p>函数介绍：https://docs.pbihub.cn/m/_book/Csv.Document.html</p>
]]></content>
    </entry>
</feed>